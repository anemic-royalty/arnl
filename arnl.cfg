# Global settings section
[settings]

# Your Nicehash wallet
NiceHashWalletAddress=

# Which Nicehash's server is located closest to you? [eu, usa, hk, jp, in, br]
NicehashRegion=eu 

# Your cost of electricity in USD per kWh.
ElectricityCost=0.2

# Set profitability threshold to switch. Default is 5 % (new currency must be
# at least 5 % more profitable to mine in order to swich).
ProfitabilityThreshold=5

# Check algorithms profitability from NiceHash each X seconds. Do not set lower
# than 60 (as per Nicehash docs).
NicehashCheckTimer=60

# Number of tries to run miner before switching to another one.
TerminationLimit=3

# What should the miner fallback to if data from Nicehash are completely
# unavailable?
# (Happens when their website is not working properly when the program starts)
FallbackAlgorithm=daggerhashimoto

# Developer contribution. How many minutes a day your mining power mines for the
# developer.
# 14 minutes a day are a little under 1%.
# Use only integers.
# Set to zero if you do not want to contribute at all.
DeveloperContributionMins=14


###
###
###
# Definition of workers

# Use [worker's name] to define a new worker

# Each worker must have at least one algorithm and its properities specified.
# A worker may consist of virtually unlimited number of GPUs, however since
# each worker is treated as a homogenous unit, individual GPUs should be very
# similar in their Hash/Watt ratio.
# For example, grouping your RX570s in a single worker and your 1080s in another
# worker might be a good idea since they're likely to perform similarly, however
# mixing them together in one worker almost definitely isn't a good idea.

# Worker specifications look, in general, like this: 
# algorithm.option=value
# Currently supported algorithms are:
# keccak, nist5, neoscrypt, lyra2rev2, cryptonight, lbry, blake2s, skunk,
# x11gost, daggerhashimoto, equihash


# perf - hashing performance
# watt - required wattage while running the algorithm
# runarg - argument to pass to the miner. You'll most likely use it to specify the cards
# runbefore - a command that should be executed before running selected algorithm. Probably most useful for algorithm specific overclocking / fan control.
# runafter - a command that should be executed after running selected algorithm. 
# 
# Since example is usually worth a thousand words, here are a few:
# One worker named "Card 1", mining equihash at 574 Sol/s, while requiring 163 watts:
# 
# [Card 1]
# equihash.perf=574
# equihash.watt=163
# 
# That's it, nothing more is required. If you have more cards in your rig, you
# want to let the miner know that you want it to use only this card, not all
# cards in the rig as that is the default behavior of virtually all miners.
# The relevant arguments for supported miners are:
# 
# ccminer: -d X
# ethminer: --cuda-devices X (for nVidia cards) / --opencl-devices X (for AMD cards)
# zm: --dev X
# where X is the device number.
# 
# To list your devices, use: ccminer -n / ethminer --list-devices / zm --list-devices
# 
# Adding this to the example above, if the card was listed as number 0 by zm,
# the configuration would look like this:
# Exaple 2
# [Card 1]
# equihash.perf=574
# equihash.watt=163
# equihash.runarg=--dev 0
# 
# Following example will use custom OC settings for daggerhashimoto. The reason
# I use this setting is that daggerhashmito thrives on fast memory but doesn't
# neccasarily need high core clock. Also note that due to a weird bug in nVidia
# drivers, you may need to use unusually high numbers for their latest cards.
# See more here: https://devtalk.nvidia.com/default/topic/1010856/linux/how-to-force-performance-level-3-driver-381-22-with-gtx-1080-ti-/
# 
# [Card 1]
# daggerhashimoto.perf=25
# daggerhashimoto.watt=149
# daggerhashimoto.runarg=--cuda-devices 0
# daggerhashimoto.runbefore=nvidia-settings -a '[gpu:1]/GPUGraphicsClockOffset[3]=-100' -a '[gpu:1]/GPUMemoryTransferRateOffset[3]=1750'
# daggerhashimoto.runafter=nvidia-settings -a '[gpu:1]/GPUGraphicsClockOffset[3]=165' -a '[gpu:1]/GPUMemoryTransferRateOffset[3]=1500'
# 
# What this example achives is underclocking the core and overclocking the
# memory before ethminer starts and returning the card to the usual OC settings
# I run it after ethminer is finished. If you plan to take advantage of this
# possibility, note that nvidia-settings and nvidia-smi number the cards in a
# different way than miners usually do. While this card is in my case listed as
# number 0 by all miners, nvidia-settings assigns it number 1
# (as seen in the [gpu:1] argument).
# 
# As should be apparent by now, using workers is easy. The last example groups
# three cards (detected in positions 0, 3, 5 by ccminer) together so they are
# treated as one:
#
# [All my 1080s]
# nist5.perf=160.41
# nist5.watt=417
# nist5.runarg=-d 0,3,5
# 
# That's all there is to it.
#
#
# Following are settings I actually use for my GTX 1060/1080 cards. Each
# algorithm is preceded by the unit that the performance should be expressed in.
# 
# [GTX 1060]
# 
# # GH/s
# blake2s.perf=2.65043
# blake2s.watt=103
# blake2s.runarg=-d 1
# 
# # kH/s
# cryptonight.perf=0.4984
# cryptonight.watt=57
# cryptonight.runarg=-d 1
# 
# # MH/s
# daggerhashimoto.perf=23.72
# daggerhashimoto.watt=104
# daggerhashimoto.runarg=--cuda-devices 1
# daggerhashimoto.runbefore=nvidia-settings -a '[gpu:0]/GPUGraphicsClockOffset[3]=0' -a '[gpu:0]/GPUMemoryTransferRateOffset[3]=1400'
# daggerhashimoto.runafter=nvidia-settings -a '[gpu:0]/GPUGraphicsClockOffset[3]=100' -a '[gpu:0]/GPUMemoryTransferRateOffset[3]=500'
# 
# # Sol/s
# equihash.perf=310
# equihash.watt=104
# equihash.runarg=--dev 1
# 
# # MH/s
# keccak.perf=481.94
# keccak.watt=102
# keccak.runarg=-d 1
# 
# # GH/s
# lbry.perf=0.18945
# lbry.watt=102
# lbry.runarg=-d 1
# 
# # MH/s
# lyra2rev2.perf=25.91
# lyra2rev2.watt=99
# lyra2rev2.runarg=-d 1
# 
# # MH/s
# neoscrypt.perf=0.6466
# neoscrypt.watt=100
# neoscrypt.runarg=-d 1
# 
# # MH/s 
# nist5.perf=29.37
# nist5.watt=99
# nist5.runarg=-d 1
# 
# # MH/s
# skunk.perf=19.86
# skunk.watt=98
# skunk.runarg=-d 1
# # 
# # # MH/s
# x11gost.perf=6.98
# x11gost.watt=88
# x11gost.runarg=-d 1
# 
# [GTX 1080]
# # GH/s
# blake2s.perf=5.18
# blake2s.watt=160
# blake2s.runarg=-d 0
# 
# # kH/s
# cryptonight.perf=0.62787
# cryptonight.watt=100
# cryptonight.runarg=-d 0
# 
# # MH/s
# daggerhashimoto.perf=25
# daggerhashimoto.watt=149
# daggerhashimoto.runarg=--cuda-devices 0
# daggerhashimoto.runbefore=nvidia-settings -a '[gpu:1]/GPUGraphicsClockOffset[3]=-100' -a '[gpu:1]/GPUMemoryTransferRateOffset[3]=1750'
# daggerhashimoto.runafter=nvidia-settings -a '[gpu:1]/GPUGraphicsClockOffset[3]=165' -a '[gpu:1]/GPUMemoryTransferRateOffset[3]=1500'
# 
# # Sol/s
# equihash.perf=574
# equihash.watt=163
# equihash.runarg=--dev 0
# 
# # MH/s
# keccak.perf=980.22
# keccak.watt=159
# keccak.runarg=-d 0
# 
# # GH/s
# lbry.perf=0.3739
# lbry.watt=153
# lbry.runarg=-d 0
# 
# # MH/s
# lyra2rev2.perf=49.81
# lyra2rev2.watt=152
# lyra2rev2.runarg=-d 0
# 
# # MH/s
# neoscrypt.perf=1.111347
# neoscrypt.watt=156
# neoscrypt.runarg=-d 0
# 
# # MH/s 
# nist5.perf=53.1
# nist5.watt=143
# nist5.runarg=-d 0
# 
# # MH/s
# skunk.perf=38.62
# skunk.watt=151
# skunk.runarg=-d 0
#  
# # MH/s
# x11gost.perf=13.04
# x11gost.watt=152
# x11gost.runarg=-d 0
